#!/usr/bin/env php
<?php

namespace BecomeADeveloper\fc;

// enable timer
$startTimer = microtime(true);

if ($argc !== 2 && $argc !== 3) {
    echo "Please, enter command: ./fc filename.txt" . PHP_EOL;
    echo "Use the -S key to enable sequence counting" . PHP_EOL;
    exit(1);
}

// filename
$name = $argv[1];

// include data file
$require = __DIR__ . '/../src/' . $name;

if (!is_file($require)) {
    echo "File does not exist. Path to file: BECOME-A-DEVELOPER/src/" . PHP_EOL;
    exit(2);
}

if (!$file = fopen($require, 'rb')) {
    echo "Error opening file for reading" . PHP_EOL;
    fclose($file);
    exit(3);
}

if (isset($argv[2]) && ($argv[2] != '-S' && $argv[2] != '-s')) {
    echo "Wrong key! Try ./fc filename.txt -S" . PHP_EOL;
    exit(5);
}

if ($name === 'filename.txt' && !is_file($name)) {
    echo "Replace 'filename.txt' with the name of the file to be connected!!!" . PHP_EOL;
    exit(6);
}

// init global variables
$data = [];
$count = 0;
$sum = 0;

if ($argc === 3) {
    $key = $argv[2];

    $increase = 1;
    $decrease = 1;
    $accIncr = 1;
    $accDecr = 1;
}

// single pass calculation
while ($line = fgets($file)) {
    // data filtering
    $clearLine = trim($line);
    if (!is_numeric($clearLine)) {
        continue;
    } else {
        $num = intval($clearLine);
        $data[] = $num;

        $sum += $num;
        $count++;
    }
    // sequence counting
    if (isset($key)) {
        if (!isset($prev)) {
            $prev = $num;
        } else {
            if ($num > $prev) {
                $accIncr++;
                $accDecr = 1;
            } else {
                $accDecr++;
                $accIncr = 1;
            }

            if ($accIncr > $increase) {
                $increase = $accIncr;
            }
            if ($accDecr > $decrease) {
                $decrease = $accDecr;
            }
        }
        $prev = $num;
    }
}

if (!feof($file)) {
    echo "Error reading from file" . PHP_EOL;
    fclose($file);
    exit(4);
}

fclose($file);
sort($data);

// calculateMedian
$middle = $count / 2;
$median = ($count % 2) ? $data[ceil($middle) - 1] : ($data[$middle] + $data[$middle - 1]) / 2;

// calculateAverage
$average = $sum / $count;

echo "Max: {$data[$count - 1]}" . PHP_EOL;
echo "Min: {$data[0]}" . PHP_EOL;
echo "Median: {$median}" . PHP_EOL;
echo "Average: {$average}" . PHP_EOL;
if (isset($key)) {
    echo "Largest increasing sequence: {$increase}" . PHP_EOL;
    echo "Largest decreasing sequence: {$decrease}" . PHP_EOL;
}
echo "Execution time: " . timer($startTimer) . " sec" . PHP_EOL;

function timer($startTimer)
{
    $stopTimer = microtime(true);
    return $stopTimer - $startTimer;
}
